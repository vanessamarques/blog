<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on DataBrainiacs</title>
        <link>http://localhost:1313/br/posts/</link>
        <description>Recent content in Posts on DataBrainiacs</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 10 Aug 2019 00:00:00 +0000</lastBuildDate>
        <atom:link href="http://localhost:1313/br/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>O que é Big Data?</title>
            <link>http://localhost:1313/br/posts/2019/08/o-que-%C3%A9-big-data/</link>
            <pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/br/posts/2019/08/o-que-%C3%A9-big-data/</guid>
            <description>O que é Big Data? Como vocês já devem saber, eu criei esse blog com a intenção de falar sobre computação em nuvem e big data de forma descomplicada para compartilhar algumas coisas que aprendi ao longo de alguns anos trabalhando como arquiteta de soluções.
Mas pra fazer isso seria bom a gente começar pelo começo: afinal, o que é big data? Big = Grande Data = Dados
Ok, é isso?</description>
            <content type="html"><![CDATA[

<h2 id="o-que-é-big-data">O que é Big Data?</h2>

<p>Como vocês já devem saber, eu criei esse blog com a intenção de falar sobre computação em nuvem e big data de forma descomplicada para compartilhar algumas coisas que aprendi ao longo de alguns anos trabalhando como arquiteta de soluções.</p>

<p>Mas pra fazer isso seria bom a gente começar pelo começo: afinal, o que é big data?
<strong>Big = Grande</strong>
<strong>Data = Dados</strong></p>

<p>Ok, é isso? Grandes Dados? Muitos dados? Quão grande? Muitos quantos? Como a gente sabe que deixamos de lidar com dados normais para passar a lidar com muitos dados?</p>

<h3 id="os-3-v-s">Os 3 V&rsquo;s</h3>

<p>Uma forma bastante aceita de se explicar big data é usando 3 V&rsquo;s:
- <strong>Volume</strong>: Referente ao tamanho e quantidade dos dados.
- <strong>Variedade</strong>: Referente aos diferentes formatos e fontes dos dados. Podem ser documentos de diferentes formatos, logs de servidores, registro de transações, registro de uso de páginas web, interações em redes sociais e outros tipos de dados que façam sentido para sua aplicação.
- <strong>Velocidade</strong>: A rapidez com que esses dados são gerados e, possivelmente, que terão que ser processados para que os resultados sejam apresentados.</p>

<h3 id="mas-qual-volume-variedade-e-velocidade">Mas qual volume, variedade e velocidade?</h3>

<p>Os 3 V&rsquo;s são super usados para definir big data, mas eu não falei nenhum número específico para dizer: ok, a partir de tantos GBs é big data, ou a partir de tantos dados diferentes ou de uma velocidade X. E aí você me diz:
Ok Vanessa, mas eu quero saber os números! Quando eu posso passar a usar o termo big data?</p>

<p>Minha resposta é: depende (dica: a resposta quase sempre é essa).</p>

<p>Depende do seu poder computacional, dos recursos que você tem disponíveis para lidar com esses dados e das expectativas que você tem em relação aos resultados gerados.</p>

<p>Em um workshop de big data há alguns anos, eu ouvi algo que para mim fez muito sentido:
&ldquo;&rsquo;
Quando ferramentas tradicionais já não são o suficiente para você gerar os resultados no tempo e na forma que precisa, e você sente necessidade de começar a utilizar novas ferramentas, é possível que você esteja lidando com big data. Isso vai depender dos recursos computacionais que você tem disponíveis no momento, de que resultados está buscando e em quanto tempo eles precisam estar prontos.
&ldquo;&rsquo;</p>

<p>Ou seja, eu disse tudo isso para que a resposta final seja &ldquo;depende&rdquo;. Mas agora você já sabe que elementos deve analisar para conseguir responder se você está ou não lidando com big data.</p>
]]></content>
        </item>
        
        <item>
            <title>Comecando com Hugo</title>
            <link>http://localhost:1313/br/posts/2014/04/comecando-com-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/br/posts/2014/04/comecando-com-hugo/</guid>
            <description>&lt;h2 id=&#34;étape-1-installer-hugo&#34;&gt;Étape 1. Installer Hugo&lt;/h2&gt;

&lt;p&gt;Allez sur la page de téléchargements de
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34; target=&#34;_blank&#34;&gt;hugo&lt;/a&gt; et téléchargez la version
appropriée à votre système d&amp;rsquo;exploitation et votre architecture.&lt;/p&gt;

&lt;p&gt;Sauvegardez le fichier téléchargé à un endroit précis, afin de l&amp;rsquo;utiliser dans
l&amp;rsquo;étape suivante.&lt;/p&gt;

&lt;p&gt;Des informations plus complètes sont disponibles sur la page
&lt;a href=&#34;http://localhost:1313/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="étape-1-installer-hugo">Étape 1. Installer Hugo</h2>

<p>Allez sur la page de téléchargements de
<a href="https://github.com/spf13/hugo/releases" target="_blank">hugo</a> et téléchargez la version
appropriée à votre système d&rsquo;exploitation et votre architecture.</p>

<p>Sauvegardez le fichier téléchargé à un endroit précis, afin de l&rsquo;utiliser dans
l&rsquo;étape suivante.</p>

<p>Des informations plus complètes sont disponibles sur la page
<a href="/overview/installing/">installing hugo</a></p>

<h2 id="étape-2-compilez-la-documentation">Étape 2. Compilez la documentation</h2>

<p>Hugo possède son propre site d&rsquo;exemple qui se trouve être également le site que
vous lisez actuellement.</p>

<p>Suivez les instructions suivante :</p>

<ol>
<li>Clonez le <a href="http://github.com/spf13/hugo" target="_blank">dépôt de hugo</a></li>
<li>Allez dans ce dépôt</li>
<li>Lancez Hugo en mode serveur et compilez la documentation</li>
<li>Ouvrez votre navigateur sur <a href="http://localhost:1313" target="_blank">http://localhost:1313</a></li>
</ol>

<p>Voici les commandes génériques correspondantes :</p>

<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/chemin/ou/vous/avez/installe/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>

<p>Lorsque vous avez cela, continuez le reste de ce guide sur votre version locale.</p>

<h2 id="étape-3-changer-le-site-de-documentation">Étape 3. Changer le site de documentation</h2>

<p>Arrêtez le processus de Hugo en pressant ctrl+c.</p>

<p>Maintenant, nous allons relancer hugo, mais cette fois avec Hugo en mode de
surveillance.</p>

<pre><code>/chemin/vers/hugo/de/l-etape/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>

<p>Ouvrez votre <a href="https://vim.spf13.com" target="_blank">éditeur favori</a> et changer l&rsquo;une des
sources des pages de contenu.
Open your <a href="http://vim.spf13.com" target="_blank">favorite editor</a> and change one of the source
content pages. Que diriez-vous de modifier ce fichier pour <em>résoudre une faute
de typo</em>.</p>

<p>Les fichiers de contenu peuvent être trouvés dans <code>docs/content/</code>. Sauf
indication contraire, les fichiers sont situés au même emplacement relatif que
l&rsquo;URL, dans notre cas <code>docs/content/overview/quickstart.md</code>.</p>

<p>Modifiez et sauvegardez ce fichier. Notez ce qu&rsquo;il se passe dans le terminal.</p>

<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>

<p>Rechargez la page dans votre navigateur et voyez que le problème de typo est
maintenant résolu.</p>

<p>Notez à quel point cela a été rapide. Essayez de recharger le site avant qu&rsquo;il
soit fini de compiler.
Notice how quick that was. Try to refresh the site before it&rsquo;s finished
building. Je paris que vous n&rsquo;y arrivez pas.
Le fait d&rsquo;avoir des réactions presque instantanées vous permet d&rsquo;avoir votre
créativité fluide sans avoir à attendre de longues compilations.</p>

<h2 id="step-4-amusez-vous">Step 4. Amusez-vous</h2>

<p>Le meilleur moyen d&rsquo;apprendre quelque chose est de s&rsquo;amuser avec.</p>]]></content>
        </item>
        
        <item>
            <title>Introducao a (Hu)go</title>
            <link>http://localhost:1313/br/posts/2014/04/introducao-a-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/br/posts/2014/04/introducao-a-hugo/</guid>
            <description>Hugo utilise l&amp;rsquo;excellente librairie go html/template pour son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.
Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates.</description>
            <content type="html"><![CDATA[

<p>Hugo utilise l&rsquo;excellente librairie <a href="http://golang.org/&gt;" target="_blank">go</a> <a href="http://golang.org/pkg/html/template/&gt;" target="_blank">html/template</a> pour
son moteur de modèles. c&rsquo;est un moteur extrêmement léger qui offre un très petit
nombre de fonctions logiques. À notre expérience, c&rsquo;est juste ce qu&rsquo;il faut pour
créer un bon site web statique. Si vous avez déjà utilisé d&rsquo;autre moteurs de
modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de
similitudes avec les modèles go.</p>

<p>Ce document est une introduction sur l&rsquo;utilisation de Go templates. La
<a href="http://golang.org/pkg/html/template/&gt;" target="_blank">documentation go</a> fourni plus de détails.</p>

<h2 id="introduction-aux-modèles-go">Introduction aux modèles Go</h2>

<p>Go templates fournit un langage de modèles très simple. Il adhère à la
conviction que les modèles ou les vues doivent avoir une logique des plus
élémentaires. L&rsquo;une des conséquences de cette simplicité est que les modèles
seront plus rapides a être analysés.</p>

<p>Une caractéristique unique de Go templates est qu&rsquo;il est conscient du contenu.
Les variables et le contenu va être nettoyé suivant le contexte d&rsquo;utilisation.
Plus de détails sont disponibles dans la <a href="http://golang.org/pkg/html/template/&gt;" target="_blank">documentation go</a>.</p>

<h2 id="syntaxe-basique">Syntaxe basique</h2>

<p>Les modèles en langage Go sont des fichiers HTML avec l&rsquo;ajout de variables et
fonctions.</p>

<p><strong>Les variables Go et les fonctions sont accessibles avec {{ }}</strong></p>

<p>Accès à une variable prédéfinie &ldquo;foo&rdquo;:</p>

<pre><code>{{ foo }}
</code></pre>

<p><strong>Les paramètres sont séparés par des espaces</strong></p>

<p>Appel de la fonction add avec 1 et 2 en argument**</p>

<pre><code>{{ add 1 2 }}
</code></pre>

<p><strong>Les méthodes et les champs sont accessibles par un point</strong></p>

<p>Accès au paramètre de la page &ldquo;bar&rdquo;</p>

<pre><code>{{ .Params.bar }}
</code></pre>

<p><strong>Les parenthèses peuvent être utilisées pour grouper des éléments ensemble</strong></p>

<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>

<h2 id="variables">Variables</h2>

<p>Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à
chaque modèle est passé soit une page, soit une structure de nœud, suivant quel
type de page vous rendez. Plus de détails sont disponibles sur la page des
<a href="/layout/variables">variables</a>.</p>

<p>Une variable est accessible par son nom.</p>

<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>

<p>Les variables peuvent également être définies et appelées.</p>

<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>

<h2 id="functions">Functions</h2>

<p>Go templace est livré avec quelques fonctions qui fournissent des
fonctionnalités basiques. Le système de Go template fourni également un
mécanisme permettant aux applications d&rsquo;étendre les fonctions disponible. Les
<a href="/layout/functions">fonctions de modèle Hugo</a> fourni quelques fonctionnalités
supplémentaires que nous espérons qu&rsquo;elles seront utiles pour vos sites web.
Les functions sont appelées en utilisant leur nom suivi par les paramètres
requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être
ajoutées sans recompiler Hugo.</p>

<p><strong>Exemple:</strong></p>

<pre><code>{{ add 1 2 }}
</code></pre>

<h2 id="inclusions">Inclusions</h2>

<p>Lorsque vous incluez un autre modèle, vous devez y passer les données qu&rsquo;il sera
en mesure d&rsquo;accèder. Pour passer le contexte actuel, pensez à ajouter un point.
La localisation du modèle sera toujours à partir du répertoire /layout/ dans
Hugo.</p>

<p><strong>Exemple:</strong></p>

<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>

<h2 id="logique">Logique</h2>

<p>Go templates fourni les itérations et la logique conditionnèle des plus basique.</p>

<h3 id="itération">Itération</h3>

<p>Comme en go, les modèles go utilisent fortement <em>range</em> pour itérer dans une
map, un array ou un slice. Les exemples suivant montre différentes façons
d&rsquo;utiliser <em>range</em></p>

<p><strong>Exemple 1: En utilisant le context</strong></p>

<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>

<p><strong>Exemple 2: En déclarant un nom de variable</strong></p>

<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>

<p><strong>Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur</strong></p>

<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>

<h3 id="conditions">Conditions</h3>

<p><em>If</em>, <em>else</em>, <em>with</em>, <em>or</em>, <em>&amp;</em>, <em>and</em> fournissent la base pour la logique
conditionnelle avec Go templates. Comme <em>range</em>, chaque déclaration est fermé
avec <code>end</code>.</p>

<p>Go templates considère les valeurs suivante comme <em>false</em> :</p>

<ul>
<li>false</li>
<li>0</li>
<li>tout array, slice, map ou chaine d&rsquo;une longueur de zéro</li>
</ul>

<p><strong>Exemple 1: If</strong></p>

<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>

<p><strong>Exemple 2: If -&gt; Else</strong></p>

<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>

<p><strong>Exemple 3: And &amp; Or</strong></p>

<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;))
    (isset .Params &quot;attr&quot;)}}
</code></pre>

<p><strong>Exemple 4: With</strong></p>

<p>Une manière alternative d&rsquo;écrire un &ldquo;if&rdquo; et de référencer cette même valeur est
d&rsquo;utiliser &ldquo;with&rdquo;. Cela permet de remplacer le contexte <code>.</code> par cet valeur et
saute le bloc si la variable est absente.</p>

<p>Le premier exemple peut être simplifié à ceci :</p>

<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>

<p><strong>Exemple 5: If -&gt; Else If</strong></p>

<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>

<h2 id="pipes"><em>Pipes</em></h2>

<p>L&rsquo;un des composants le plus puissant de Go templates est la capacité d&rsquo;empiler
les action l&rsquo;une après l&rsquo;autre. Cela est fait en utilisant les <em>pipes</em>.
Empruntés aux <em>pipes</em> unix, le concept est simple. Chaque sortie de <em>pipeline</em>
devient l&rsquo;entrée du <em>pipe</em> suivant.</p>

<p>À cause de la syntaxe très simple de Go templates, le <em>pipe</em> est essentiel pour
être capable d&rsquo;enchainer les appels de fonctions. Une limitation des <em>pipes</em>
est qu&rsquo;il ne peuvent fonctionner seulement avec une seule valeur et cette valeur
devient le dernier paramètre du prochain <em>pipeline</em>.</p>

<p>Quelques exemples simple devrait vous aider à comprendre comment utiliser les
<em>pipes</em>.</p>

<p><strong>Exemple 1 :</strong></p>

<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>

<p>est identique à</p>

<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>

<p>Il semble étrange de placer le <em>if</em> à la fin, mais il fournit une bonne
illustration de la façon d&rsquo;utiliser les tuyaux.</p>

<p><strong>Exemple 2 :</strong></p>

<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>

<p>Accès au paramètre de page nommé &ldquo;disqus_url&rdquo; et échappement du HTML</p>

<p><strong>Exemple 3 :</strong></p>

<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;))
    (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>

<p>Peut être réécrit en</p>

<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; |
    or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>

<h2 id="contexte-alias-le-point">Contexte (alias. le point)</h2>

<p>Le concept le plus facilement négligé pour comprendre les modèles go est que
{{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de
votre modèle, ce sera l&rsquo;ensemble des données mis à votre disposition. Dans une
itération, ce sera la valeur de l&rsquo;élément actuel. Enfin, dans une boucle, le
contexte change. . ne fera plus référence aux données disponibles dans la page
entière. Si vous avez besoin y d&rsquo;accèder depuis l&rsquo;intérieur d&rsquo;une boucle, il est
judicieux d&rsquo;y définir comme variable au lieu de dépendre du contexte.</p>

<p><strong>Exemple:</strong></p>

<pre><code>{{ $title := .Site.Title }}
{{ range .Params.tags }}
&lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;
    {{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
{{ end }}
</code></pre>

<p>Notez que, une fois que nous sommes entrés dans la boucle, la valeur de
{{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin
d&rsquo;y avoir accès dans la boucle.</p>

<h1 id="les-paramètres-d-hugo">Les Paramètres d&rsquo;Hugo</h1>

<p>Hugo fournit l&rsquo;option de passer des valeurs au modèle depuis la configuration du
site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir
n&rsquo;importe quelle valeur de n&rsquo;importe quel type (supporté par votre section
liminaire / format de configuration) et les utiliser comme vous le souhaitez
dans votre modèle.</p>

<h2 id="utiliser-les-paramètres-de-contenu-page">Utiliser les paramètres de contenu (page)</h2>

<p>Dans chaque partie du contenu, vous pouvez fournir des variables pour être
utilisées par le modèle. Cela se passe dans la
<a href="/content/front-matter">section liminaire</a>.</p>

<p>Un exemple de cela est utilisé par ce site de documentation. La plupart des
pages bénéficient de la présentation de la table des matières. Quelques fois,
la table des matières n&rsquo;a pas beaucoup de sens. Nous avons défini une variable
dans notre section liminaire de quelques pages pour désactiver la table des
matières.</p>

<p>Ceci est un exemple de section liminaire :</p>

<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre>

<p>Ceci est le code correspondant dans le modèle :</p>

<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>

<h2 id="utiliser-les-paramètres-de-site-config">Utiliser les paramètres de site (config)</h2>

<p>Dans votre configuration de plus haut niveau (ex <code>config.yaml</code>), vous pouvez
définir des paramètres de site, dont les valeurs vous seront accessibles.</p>

<p>Pour les instances, vous pourriez délarer :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">params:
  CopyrightHTML: <span style="color:#e6db74">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
  TwitterUser: <span style="color:#e6db74">&#34;spf13&#34;</span>
  SidebarRecentLimit: <span style="color:#ae81ff">5</span></code></pre></div>
<p>Avec un pied de page, vous devriez déclarer un <code>&lt;footer&gt;</code> qui est affiché
seulement si le paramètre <code>CopyrightHTML</code> est déclaré, et si il l&rsquo;est, vous
devriez le déclarer comme HTML-safe, afin d&rsquo;éviter d&rsquo;échapper les entités HTML.
Cela vous permettra de le modifier facilement dans votre configuration au lieu
de le chercher dans votre modèle.</p>

<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre>

<p>Une alternative au &ldquo;if&rdquo; et d&rsquo;appeler la même valeur est d&rsquo;utiliser &ldquo;with&rdquo;. Cela
modifiera le contexte et passera le bloc si la variable est absente :</p>

<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre>

<p>Enfin, si vous souhaitez extraire des &ldquo;constantes magiques&rdquo; de vos mises en
page, vous pouvez le faire comme dans l&rsquo;exemple suivant :</p>

<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Migrando para Hugo de Jekyll</title>
            <link>http://localhost:1313/br/posts/2014/03/migrando-para-hugo-de-jekyll/</link>
            <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/br/posts/2014/03/migrando-para-hugo-de-jekyll/</guid>
            <description>&lt;h2 id=&#34;déplacez-le-contenu-statique-vers-static&#34;&gt;Déplacez le contenu statique vers &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll a une règle comme quoi tout répertoire qui ne commence pas par &lt;code&gt;_&lt;/code&gt; sera
copié tel-quel dans le répertoire &lt;code&gt;_site&lt;/code&gt;. Hugo garde tout le contenu statique
dans le répertoire &lt;code&gt;static&lt;/code&gt;. Vous devez donc déplacer tout ce type de contenu
là-dedans. Avec Jekylll, l&amp;rsquo;arborescence ressemblant à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;</description>
            <content type="html"><![CDATA[<h2 id="déplacez-le-contenu-statique-vers-static">Déplacez le contenu statique vers <code>static</code></h2>

<p>Jekyll a une règle comme quoi tout répertoire qui ne commence pas par <code>_</code> sera
copié tel-quel dans le répertoire <code>_site</code>. Hugo garde tout le contenu statique
dans le répertoire <code>static</code>. Vous devez donc déplacer tout ce type de contenu
là-dedans. Avec Jekylll, l&rsquo;arborescence ressemblant à ceci :</p>

<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>

<p>doit devenir</p>

<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>

<p>En outre, vous allez devoir déplacer tous les fichiers présents à la racine vers
le répertoire <code>static</code>.</p>

<h2 id="créez-votre-configuration-hugo">Créez votre configuration Hugo</h2>

<p>Hugo peut lire votre fichier de configuration au format JSON, YAML et TOML. Hugo
supporte également les paramètres de configuration. Plus d&rsquo;informations sur la
<a href="/overview/configuration/">documentation de configuration Hugo</a></p>

<h2 id="définiez-votre-répertoire-de-publication-sur-site">Définiez votre répertoire de publication sur <code>_site</code></h2>

<p>La valeur par défaut pour Jekyll est d&rsquo;utiliser le répertoire <code>_site</code> pour
publier le contenu. Pour Hugo, le répertoire de publication est <code>public</code>. Si,
comme moi, vous avez <a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.ht
ml" target="_blank">lié <code>_site</code> vers un sous-module git sur la branche
<code>gh-pages</code></a>, vous allez vouloir avoir quelques alternatives :</p>

<ol>
<li><p>Changez votre lien du sous-module <code>gh-pages</code> pour pointer sur public au lieu
de <code>_site</code> (recommendé).</p>

<pre><code>git submodule deinit _site
git rm _site
git submodule add -b gh-pages
    git@github.com:your-username/your-repo.git public
</code></pre></li>

<li><p>Ou modifiez la configuration de Hugo pour utiliser le répertoire <code>_site</code> au
lieu de <code>public</code>.</p>

<pre><code>{
    ..
    &quot;publishdir&quot;: &quot;_site&quot;,
    ..
}
</code></pre></li>
</ol>

<h2 id="convertir-un-thème-jekyll-pour-hugo">Convertir un thème Jekyll pour Hugo</h2>

<p>C&rsquo;est la majeure partie du travail. La documentation est votre ami.
Vous devriez vous référer à <a href="http://jekyllrb.com/docs/templates/" target="_blank">la documentation des thèmes de Jekyll</a> si vous devez vous rafraîchir la mémoire
sur la façon dont vous avez construit votre blog et <a href="/layout/templates/">les thèmes de Hugo</a> pour apprendre la manière de faire sur Hugo.</p>

<p>Pour vous donner un point de référence, la conversion du thème pour
<a href="http://heyitsalex.net/" target="_blank">heyitsalex.net</a> ne m&rsquo;a pris que quelques heures.</p>

<h2 id="convertir-les-extensions-jekyll-vers-des-shortcodes-hugo">Convertir les extensions Jekyll vers des shortcodes Hugo</h2>

<p>Jekyll support les <a href="http://jekyllrb.com/docs/plugins/" target="_blank">extensions</a>; Hugo lui a
les <a href="/doc/shortcodes/">shortcodes</a>. C&rsquo;est assez banal les porter.</p>

<h3 id="implémentation">Implémentation</h3>

<p>Comme exemple, j&rsquo;utilise une extension pour avoir un <a href="https://githu
b.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc
06908ec/_plugins/image_tag.rb" target="_blank"><code>image_tag</code></a> presonnalisé pour générer les images avec une
légende sur Jekyll. J&rsquo;ai vu que Hugo implémente un shortcode qui fait exactement
la même chose.</p>

<p>Extension Jekyll :</p>

<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK =
        /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;
        ((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre>

<p>Écrite en tant que shortcode Hugo:</p>

<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot;
            {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}
                alt=&quot;{{ with .Get &quot;alt&quot;}}
                        {{.}}
                     {{else}}
                        {{ .Get &quot;caption&quot; }}
                     {{ end }}&quot;
               {{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre>

<h3 id="utilisation">Utilisation</h3>

<p>J&rsquo;ai simplement changé :</p>

<pre><code>{% image
    full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg
    &quot;One of my favorite touristy-type photos. I secretly waited for the
    good light while we were &quot;having fun&quot; and took this. Only regret: a
    stupid pole in the top-left corner of the frame I had to clumsily get
    rid of at post-processing.&quot;
    -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/
        set-72157624547713078/ %}
</code></pre>

<p>pour cela (cet exemple utilise une version légèrement étendue nommée <code>fig</code>,
différente de la <code>figure</code> intégrée) :</p>

<pre><code>{{% fig class=&quot;full&quot;
    src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot;
    title=&quot;One of my favorite touristy-type photos. I secretly waited for the
    good light while we were having fun and took this. Only regret: a stupid
    pole in the top-left corner of the frame I had to clumsily get rid of at
    post-processing.&quot;
    link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/
            set-72157624547713078/&quot; %}}
</code></pre>

<p>Comme bonus, les paramètres nommés des shortcodes sont plus lisibles.</p>

<h2 id="touches-finales">Touches finales</h2>

<h3 id="corriger-le-contenu">Corriger le contenu</h3>

<p>Suivant le nombre de modifications que vous avez effectué sur chaque articles
avec Jekyll, cette étape requierra plus ou moins d&rsquo;efforts. Il n&rsquo;y a pas de
règles rigoureuses ici, si ce n&rsquo;est que <code>hugo server --watch</code> est votre ami.
Testez vos modifications et corrigez les erreurs au besoin.</p>

<h3 id="nettoyez-le-tout">Nettoyez le tout</h3>

<p>Vous voudrez sûrement supprimer votre configuration Jekyll maintenant que tout
est fini. Exact, pensez à supprimer tout ce qui est inutilisé.</p>

<h2 id="un-exemple-pratique">Un exemple pratique</h2>

<p><a href="http://heyitsalex.net/" target="_blank">Hey, it&rsquo;s Alex</a> a été migré de Jekyll vers Hugo en
moins de temps qu&rsquo;une journée père enfant. Vous pouvez trouver toutes les
modification en regardant ce <a href="https://github.com/alexandre-normand/alexand
re-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b
81495423294208cc74d610" target="_blank">diff</a>.</p>]]></content>
        </item>
        
    </channel>
</rss>
